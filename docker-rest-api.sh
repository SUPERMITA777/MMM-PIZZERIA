#!/bin/bash

echo "üöÄ EJECUTANDO CONFIGURACI√ìN RLS VIA API REST CON DOCKER"
echo "====================================================="
echo ""

# Leer credenciales desde supabase-config.js
echo "üîç Extrayendo credenciales de supabase-config.js..."

# Extraer URL
SUPABASE_URL=$(grep -o "url: '[^']*'" /workspace/supabase-config.js | cut -d"'" -f2)

# Extraer service role key
SERVICE_KEY=$(grep -o "serviceRoleKey: '[^']*'" /workspace/supabase-config.js | cut -d"'" -f2)

# Extraer anon key
ANON_KEY=$(grep -o "anonKey: '[^']*'" /workspace/supabase-config.js | cut -d"'" -f2)

echo "‚úÖ Credenciales extra√≠das:"
echo "   URL: $SUPABASE_URL"
echo "   Service Key: ${SERVICE_KEY:0:20}..."
echo "   Anon Key: ${ANON_KEY:0:20}..."
echo ""

# Funci√≥n para ejecutar SQL via API
execute_sql_api() {
    local sql_query="$1"
    local description="$2"
    
    echo "üìã $description..."
    
    # Intentar diferentes endpoints
    local endpoints=("rpc/sql" "rpc/query" "rpc/exec_sql" "rpc/execute")
    
    for endpoint in "${endpoints[@]}"; do
        response=$(curl -s -w "\n%{http_code}" \
            -X POST "$SUPABASE_URL/rest/v1/$endpoint" \
            -H "Authorization: Bearer $SERVICE_KEY" \
            -H "Content-Type: application/json" \
            -H "apikey: $SERVICE_KEY" \
            -d "{\"query\": \"$sql_query\", \"sql\": \"$sql_query\"}")
        
        http_code=$(echo "$response" | tail -n1)
        response_body=$(echo "$response" | head -n -1)
        
        if [ "$http_code" -eq 200 ]; then
            echo "‚úÖ $description: exitoso (endpoint: $endpoint)"
            return 0
        fi
    done
    
    echo "‚ö†Ô∏è $description: API no disponible (normal)"
    return 1
}

# Array de pol√≠ticas SQL
policies=(
    "DROP POLICY IF EXISTS \"Allow anon uploads to categorias bucket\" ON storage.objects"
    "DROP POLICY IF EXISTS \"Allow anon access to categorias bucket\" ON storage.objects" 
    "DROP POLICY IF EXISTS \"Allow anon updates to categorias bucket\" ON storage.objects"
    "DROP POLICY IF EXISTS \"Allow anon deletes from categorias bucket\" ON storage.objects"
    "ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY"
    "ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY"
    "CREATE POLICY \"Allow anon uploads to categorias bucket\" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'categorias')"
    "CREATE POLICY \"Allow anon access to categorias bucket\" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'categorias')"
    "CREATE POLICY \"Allow anon updates to categorias bucket\" ON storage.objects FOR UPDATE TO anon USING (bucket_id = 'categorias') WITH CHECK (bucket_id = 'categorias')"
    "CREATE POLICY \"Allow anon deletes from categorias bucket\" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'categorias')"
)

descriptions=(
    "Limpiar pol√≠tica uploads"
    "Limpiar pol√≠tica access"
    "Limpiar pol√≠tica updates" 
    "Limpiar pol√≠tica deletes"
    "Habilitar RLS objects"
    "Habilitar RLS buckets"
    "Crear pol√≠tica uploads"
    "Crear pol√≠tica access"
    "Crear pol√≠tica updates"
    "Crear pol√≠tica deletes"
)

echo "üîß Ejecutando pol√≠ticas RLS..."
echo ""

# Ejecutar cada pol√≠tica
for i in "${!policies[@]}"; do
    execute_sql_api "${policies[$i]}" "${descriptions[$i]}"
    sleep 0.5
done

echo ""
echo "üß™ Probando funcionalidad con usuario an√≥nimo..."

# Test de subida
TEST_FILE="test_docker_$(date +%s).png"
TEST_DATA="iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="

# Decodificar base64 a archivo temporal
echo "$TEST_DATA" | base64 -d > /tmp/test.png

upload_response=$(curl -s -w "\n%{http_code}" \
    -X POST "$SUPABASE_URL/storage/v1/object/categorias/test/$TEST_FILE" \
    -H "Authorization: Bearer $ANON_KEY" \
    -H "Content-Type: image/png" \
    -H "apikey: $ANON_KEY" \
    --data-binary @/tmp/test.png)

upload_http_code=$(echo "$upload_response" | tail -n1)
upload_body=$(echo "$upload_response" | head -n -1)

if [ "$upload_http_code" -eq 200 ] || [ "$upload_http_code" -eq 201 ]; then
    echo "‚úÖ Test de subida exitoso - RLS configurado correctamente"
    
    # Limpiar archivo de test
    curl -s -X DELETE "$SUPABASE_URL/storage/v1/object/categorias/test/$TEST_FILE" \
        -H "Authorization: Bearer $ANON_KEY" \
        -H "apikey: $ANON_KEY" > /dev/null
    
    echo "üóëÔ∏è Archivo de test eliminado"
    echo ""
    echo "üéâ ¬°CONFIGURACI√ìN EXITOSA!"
    echo ""
    echo "‚úÖ Las pol√≠ticas RLS han sido configuradas"
    echo "‚úÖ El bucket 'categorias' acepta usuarios an√≥nimos" 
    echo "‚úÖ Ya puedes crear categor√≠as con im√°genes"
    echo ""
    echo "üîÑ SIGUIENTE PASO:"
    echo "   1. Recarga tu panel de administraci√≥n"
    echo "   2. Prueba crear una categor√≠a con imagen"
    echo "   3. ¬°Deber√≠a funcionar sin errores!"
    
else
    echo "‚ùå Test de subida fall√≥ (HTTP: $upload_http_code)"
    echo "Response: $upload_body"
    echo ""
    
    if echo "$upload_body" | grep -q "row-level security policy"; then
        echo "üîß RLS A√öN NO CONFIGURADO - EJECUTAR MANUALMENTE:"
        echo ""
        echo "Ve al Dashboard de Supabase ‚Üí SQL Editor y ejecuta:"
        echo ""
        echo "CREATE POLICY \"Allow anon uploads to categorias bucket\" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'categorias');"
        echo "CREATE POLICY \"Allow anon access to categorias bucket\" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'categorias');"
        echo "CREATE POLICY \"Allow anon updates to categorias bucket\" ON storage.objects FOR UPDATE TO anon USING (bucket_id = 'categorias') WITH CHECK (bucket_id = 'categorias');"
        echo "CREATE POLICY \"Allow anon deletes from categorias bucket\" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'categorias');"
    else
        echo "‚ö†Ô∏è Error diferente - puede que RLS ya est√© configurado pero hay otro problema"
    fi
fi

# Limpiar archivo temporal
rm -f /tmp/test.png

echo ""
echo "üèÅ Proceso completado"
